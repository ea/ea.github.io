<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ea's blag]]></title>
  <link href="http://ea.github.io/atom.xml" rel="self"/>
  <link href="http://ea.github.io/"/>
  <updated>2013-10-22T13:16:58+02:00</updated>
  <id>http://ea.github.io/</id>
  <author>
    <name><![CDATA[ea]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Proxmark3 on Nokia n900]]></title>
    <link href="http://ea.github.io/blog/2013/10/22/proxmark3-on-nokia-n900/"/>
    <updated>2013-10-22T10:09:00+02:00</updated>
    <id>http://ea.github.io/blog/2013/10/22/proxmark3-on-nokia-n900</id>
    <content type="html"><![CDATA[<p>Ever since I got my <a href="http://proxmark3.com/">Proxmark3</a> tool I wanted to make it portable.
Of course, Proxmark3 has a standalone mode which means you can power it
off of a USB powerbank and operate it with its single button. This option
is obviously limited and I wanted to be able to do more.</p>

<p>On the other hand, I have a good old Nokia n900. The two seemed like a perfect
pair. N900 doesn&rsquo;t support usb host mode out of the box, but latest firmware
from the awesome maemo community and a couple of modules and tools does allow
for n900 to act as a USB host. To enable the host mode, you&rsquo;d need to install
H-E=N or host mode enabler GUI (the package is called hostmode-gui) which
will in turn install kernel-power (so be careful unless you already have it).</p>

<!--more-->


<p>To actually connect anything to n900 in a host mode you&rsquo;d probably need some
adapter to go from female micro USB to female type A USB port. I had a OTG cable
lying around so I used that. But you could just use a female type A to female type A
USB adapter which would be a cheaper option.
<img src="http://ea.github.io/images/otg.png" width="450" height="550"></p>

<p>Start H-E-N and select &ldquo;Full speed hostmode&rdquo; and turn VBUS boost on.
Do note that running HEN will disable battery level monitoring so battery level
indicator won&rsquo;t work.</p>

<p><img class="m" src="http://ea.github.io/images/hen.png" width="450" height="550"></p>

<p>Now, when you connect the proxmark3 board, press &ldquo;Enumerate&rdquo; in HEN. This will
enumerate all usb devices attached and make them available to the system. After
enumeration, the LEDs on proxmark3 board should light up and you should hear the
relay click. This means that the board is powered up.  Here&rsquo;s how my setup looks:</p>

<p><img src="http://ea.github.io/images/setup.png" width="450" height="550"></p>

<p>If all goes well, you should now be able to see proxmark3 registered either via
looking at <code>dmesg</code> or <code>lsusb</code> output.</p>

<p><img src="http://ea.github.io/images/dmesg.png" width="450" height="550"></p>

<p>All is well so far. Next thing we need is a proxmark3 client. Building stuff
for n900 is a bit painfull so I opted for <a href="http://wiki.maemo.org/Easy_Debian">debian chroot</a>. You can install debian
chroot package from the repositories (it will take a while, the package is big)
and by doing so get access to all the standard debian packages (most importantly
for us, dev and build tools). After you&rsquo;ve installed debian chroot, to enter it
from the terminal, just run <code>debian</code> as root. Go grab the <a href="https://code.google.com/p/proxmark3/">proxmark3 source</a>.
You&rsquo;ll need few aditional packages listed at <a href="https://code.google.com/p/proxmark3/wiki/Linux">installation instructions</a> tho
you can skip the devkitARM stuff as you probably don&rsquo;t want to build the OS and
firmware on your phone. You&rsquo;d probably need to install a few development packages
for the chroot env (probably a few more than listed, like automake,etc&hellip;
but just add them as you go):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install subversion p7zip build-essential libreadline5 libreadline-dev libusb-0.1-4 libusb-dev perl pkg-config</span></code></pre></td></tr></table></div></figure>


<p>After you install all the required packages, building the client is as easy as running
<code>make</code>. After the successful build, you should be able to run the proxmark3 client:</p>

<p><img src="http://ea.github.io/images/pm3.png" width="450" height="550"></p>

<p>All this means I now have <a href="https://code.google.com/p/crapto1/">blacode (crapto1)</a> on my phone!</p>

<p>To be able to talk to the proxmark3 board, you need it attached to a serial port.
Easiest way to achieve that on the n900 is to install additional kernel modules
which comes with <code>usbserial</code> module (additional kernel modules can be found in the
repositories under the name <code>kernel-hostmode-modules</code> and <code>kernel-hostmode-modules-extra</code>).
To load the usbserial module use <code>modprobe</code> with suitable arguments (NOTE: run modprobe
in a regular root shell, not the debian chroot):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modprobe usbserial vendor=0x2d2d product=0x504d</span></code></pre></td></tr></table></div></figure>


<p>After this, a ttyUSB0 device should be create which you can use to talk to the
proxmark3 and we are done!</p>

<p><img src="http://ea.github.io/images/ttyusb.png" width="450" height="550"></p>

<p>Check if the antenna is working (atm I had only LF antenna attached):</p>

<p><img src="http://ea.github.io/images/lf.png" width="450" height="550"></p>

<p>Hooray!!! I now have a very very portable very very neat RFID tool!
Now to write some scripts to automate the tasks and all and we are all set.
Small problem is that currently I can&rsquo;t plot :/</p>

<p><img src="http://ea.github.io/images/noplot.png" width="450" height="550"></p>

<p>But I&rsquo;ll fix that soon too.</p>

<p>Not sure how long the battery will hold (n900 is not famed for it&rsquo;s battery
durability) but rough calculations tell me it will work for more than half an
hour which is enough for my needs.</p>

<p>Have fun,</p>

<p>ea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tenda backdoor]]></title>
    <link href="http://ea.github.io/blog/2013/10/18/tenda-backdoor/"/>
    <updated>2013-10-18T09:53:00+02:00</updated>
    <id>http://ea.github.io/blog/2013/10/18/tenda-backdoor</id>
    <content type="html"><![CDATA[<p>So, <a href="https://twitter.com/devttyS0/">devttyS0</a> recently published his find of a backdoor in <a href="http://www.devttys0.com/2013/10/reverse-engineering-a-d-link-backdoor/">certain D-Link routers</a>.
Since there are a bunch of cheap chinese routers around here, and Tenda
routers being especially cheap and popular, I wanted to take a look.</p>

<p>Long story short, <a href="http://www.devttys0.com/2013/10/from-china-with-love/">devttyS0 beat me to it and published another awsome backdoor</a>
find. The backdoor is a bit more involved than the D-Link one. Awesome work!</p>

<!--more-->


<p>What follow are just some details on other firmware versions I got.</p>

<p>list  of firmwares :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-rw-r--r-- 1 ea ea 2854920 Oct 18 09:34 301r_v3.1.192_en.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 2854920 Oct 18 09:34 302r_v3.1.192_en.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 2556279 Oct 18 09:34 3g611r_en_0607.bin.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 2544688 Oct 18 09:34 3gr_H2_V3.3.0y_multi_02.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 2536583 Oct 18 09:34 U_3G611R_H2_V3.3.1e_MULTI_02.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 1733480 Oct 18 09:34 U_W311R_W268R_H3_V3.3.6h_EN_spi.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 2778565 Oct 18 09:34 U_W330R_V3.1.201d_tenda_en.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 2853531 Oct 18 09:34 V3.1.201d_W301R_2010_0709.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 2853531 Oct 18 09:34 V3.1.201d_W302R_2010_0709.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 1710398 Oct 18 09:34 W311r_W268R_H1_V3.3.6b_ost_staticR.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 1710398 Oct 18 09:34 W368r_H1_V3.3.6b_ost_staticR.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 1739357 Oct 18 09:34 w368r_H1_V3.3.6l_EN.bin
</span><span class='line'>-rw-r--r-- 1 ea ea 1733480 Oct 18 09:34 W368R_H3_V3.3.6h_EN_spi.bin</span></code></pre></td></tr></table></div></figure>


<p>Firmwares can easily be extracted with binwalk ( -Me switch to extract everything).</p>

<p>List of httpd binaries in them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./_301r_v3.1.192_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_W311r_W268R_H1_V3.3.6b_ost_staticR.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_302r_v3.1.192_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_V3.1.201d_W301R_2010_0709.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_W368R_H3_V3.3.6h_EN_spi.bin.extracted/_40.extracted/_2A1000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_V3.1.201d_W302R_2010_0709.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_3gr_H2_V3.3.0y_multi_02.bin.extracted/_40.extracted/_401000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_w368r_H1_V3.3.6l_EN.bin.extracted/_40.extracted/_298000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_U_W330R_V3.1.201d_tenda_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_W368r_H1_V3.3.6b_ost_staticR.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_3g611r_en_0607.bin.bin.extracted/_40.extracted/_42F000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_U_W311R_W268R_H3_V3.3.6h_EN_spi.bin.extracted/_40.extracted/_2A1000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_U_3G611R_H2_V3.3.1e_MULTI_02.bin.extracted/_40.extracted/_3F9000.extracted/cpio-root/bin/httpd</span></code></pre></td></tr></table></div></figure>


<p>Their coresponding md5 sums:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>30a4a545068d99d1427556bd6612bf98  ./_301r_v3.1.192_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>d1e45b3ad126ba5ba2f7f359b8277438  ./_W311r_W268R_H1_V3.3.6b_ost_staticR.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>30a4a545068d99d1427556bd6612bf98  ./_302r_v3.1.192_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>bf4d17ad1188fa7bdd12f99b3b294567  ./_V3.1.201d_W301R_2010_0709.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>f0cd57047f6c329e59102ce4741481d8  ./_W368R_H3_V3.3.6h_EN_spi.bin.extracted/_40.extracted/_2A1000.extracted/cpio-root/bin/httpd
</span><span class='line'>bf4d17ad1188fa7bdd12f99b3b294567  ./_V3.1.201d_W302R_2010_0709.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>3f578d8b7cf8565baa239454c9713818  ./_3gr_H2_V3.3.0y_multi_02.bin.extracted/_40.extracted/_401000.extracted/cpio-root/bin/httpd
</span><span class='line'>bce9466a9bb018bd32a9dacb3a8c0487  ./_w368r_H1_V3.3.6l_EN.bin.extracted/_40.extracted/_298000.extracted/cpio-root/bin/httpd
</span><span class='line'>890a83d5aee333c40b8f0032169e3a4e  ./_U_W330R_V3.1.201d_tenda_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>d1e45b3ad126ba5ba2f7f359b8277438  ./_W368r_H1_V3.3.6b_ost_staticR.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>a22f85d995ce9c3383632b6104c5be8e  ./_3g611r_en_0607.bin.bin.extracted/_40.extracted/_42F000.extracted/cpio-root/bin/httpd
</span><span class='line'>f0cd57047f6c329e59102ce4741481d8  ./_U_W311R_W268R_H3_V3.3.6h_EN_spi.bin.extracted/_40.extracted/_2A1000.extracted/cpio-root/bin/httpd
</span><span class='line'>5bd72353206168fd340b293b2ddd264a  ./_U_3G611R_H2_V3.3.1e_MULTI_02.bin.extracted/_40.extracted/_3F9000.extracted/cpio-root/bin/httpd</span></code></pre></td></tr></table></div></figure>


<p>There are 8 different binaries in total.</p>

<p>And httpd binaries  that contain the ofending string &ldquo;w302r_mfg&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./_301r_v3.1.192_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_W311r_W268R_H1_V3.3.6b_ost_staticR.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_302r_v3.1.192_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_V3.1.201d_W301R_2010_0709.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_W368R_H3_V3.3.6h_EN_spi.bin.extracted/_40.extracted/_2A1000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_V3.1.201d_W302R_2010_0709.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_3gr_H2_V3.3.0y_multi_02.bin.extracted/_40.extracted/_401000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_w368r_H1_V3.3.6l_EN.bin.extracted/_40.extracted/_298000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_U_W330R_V3.1.201d_tenda_en.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>./_W368r_H1_V3.3.6b_ost_staticR.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_3g611r_en_0607.bin.bin.extracted/_40.extracted/_42F000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_U_W311R_W268R_H3_V3.3.6h_EN_spi.bin.extracted/_40.extracted/_2A1000.extracted/cpio-root/bin/httpd
</span><span class='line'>./_U_3G611R_H2_V3.3.1e_MULTI_02.bin.extracted/_40.extracted/_3F9000.extracted/cpio-root/bin/httpd</span></code></pre></td></tr></table></div></figure>


<p>So all of them contain the offending string, you&rsquo;d need to test if the backdoor is actually reachable.
For more details, see <a href="https://twitter.com/devttyS0/">devttyS0&rsquo;s</a> <a href="http://www.devttys0.com/2013/10/from-china-with-love/">From China with love</a> post.</p>

<p>Update:</p>

<p>Grabbed some more firmwares from tenda and these also have the ofending string in their httpd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2b8e52eeeebcf2ca1d8aea49e0decc3e  ./_US_W268RRA__H3_V3.3.6h_EN_SPI.bin.extracted/_40.extracted/_2A1000.extracted/cpio-root/bin/httpd
</span><span class='line'>2b8e52eeeebcf2ca1d8aea49e0decc3e  ./_US_W311RRA__H3_V3.3.6h_EN_SPI.bin.extracted/_40.extracted/_2A1000.extracted/cpio-root/bin/httpd
</span><span class='line'>38dbefea2e2072794fdee48d0454ea81  ./_w1500a_kfw_V1.0.1.22_en_svn6227.bin.extracted/squashfs-root/bin/httpd
</span><span class='line'>3a5c7ca273dbc9abc2fa2f01872c6ae9  ./_U150M_V3.32.12_EN.bin.extracted/_40.extracted/_2AD000.extracted/cpio-root/bin/httpd
</span><span class='line'>3a5c7ca273dbc9abc2fa2f01872c6ae9  ./_U300M_V3.32.12_EN.bin.extracted/_40.extracted/_2AD000.extracted/cpio-root/bin/httpd
</span><span class='line'>3da70dbcb25267981799cd4e80d45a66  ./_U_W302RRA_V3.1.201d_EN.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>4dd02694228931fa29d0ab24c7cf5244  ./_US_N60BRV1_N60_V1.0.0.15_EN.bin.extracted/squashfs-root/bin/httpd
</span><span class='line'>545c52d9a6ab82e38925f7ba53655738  ./_US_N6BRV1_N6_V2.0.0.2_EN.bin.extracted/squashfs-root/bin/httpd
</span><span class='line'>55429ee07ee7e12463cfb31bdde3545c  ./_U_W150M_EN_V3.33.13_SPI_EN.bin.extracted/_40.extracted/_2A2000.extracted/cpio-root/bin/httpd
</span><span class='line'>55429ee07ee7e12463cfb31bdde3545c  ./_U_W300M_EN_V3.33.13_SPI_EN.bin.extracted/_40.extracted/_2A2000.extracted/cpio-root/bin/httpd
</span><span class='line'>6940fb6098d7248430d307ad9e0f41e3  ./_U_W330R_V3.1.201f_en_onWISP.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>7bfc5d1aa54322e2a6a3d30dc1b071a1  ./_W330R_V3.1.201d_EN.bin.extracted/_40.extracted/_ramdisk.extracted/squashfs-root/bin/httpd
</span><span class='line'>8fdd1acfb877e75254db8bf0e4d4b9ce  ./_W311R_H1_V3.3.5o.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>9618f60bb71ff28670c6447a4972205c  ./_w311r_H1_V3.3.5n_en.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>9e2403f54a5de6de68217f0f55606563  ./_US_N60BRV1_N60_V1.0.0.16_EN.bin.extracted/squashfs-root/bin/httpd
</span><span class='line'>b663cb3e1e9b09bdd33116d9fade6866  ./_US_N80_W568Rbr_V1.0.1.8(4428)_en_TD.bin.extracted/_piggy.extracted/_3D8000.extracted/cpio-root/bin/httpd
</span><span class='line'>d1e45b3ad126ba5ba2f7f359b8277438  ./_W311r_H1_V3.3.6b.bin.extracted/_40.extracted/_29E000.extracted/cpio-root/bin/httpd
</span><span class='line'>d9eb8d5d79a3f4e9f4e5ded2887c39c4  ./_U268R_H1_V3.3.6d_EN.bin.extracted/_40.extracted/_2AD000.extracted/cpio-root/bin/httpd
</span><span class='line'>d9eb8d5d79a3f4e9f4e5ded2887c39c4  ./_U311R_H1_V3.3.6d_EN.bin.extracted/_40.extracted/_2AD000.extracted/cpio-root/bin/httpd
</span><span class='line'>fe34ecc4b90e0fc9bd3d50e216f80b04  ./_U150M_RT_EN_V3.32.11.bin.extracted/_40.extracted/_2AD000.extracted/cpio-root/bin/httpd
</span><span class='line'>fe34ecc4b90e0fc9bd3d50e216f80b04  ./_U300M_RT_EN_V3.32.11.bin.extracted/_40.extracted/_2AD000.extracted/cpio-root/bin/httpd</span></code></pre></td></tr></table></div></figure>


<p>Update 2:</p>

<p>Also wrote a quick Nmap NSE script to test for the backdoored routers &ndash; <a href="https://github.com/ea/nmap-scripts/blob/master/tenda-backdoor.nse">tenda-backdoor.nse</a></p>

<p>Keep on rocking in the free world,</p>

<p>ea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart card middleware reversing tricks]]></title>
    <link href="http://ea.github.io/blog/2013/09/15/reverse-engineering-smart-card-middleware/"/>
    <updated>2013-09-15T00:30:00+02:00</updated>
    <id>http://ea.github.io/blog/2013/09/15/reverse-engineering-smart-card-middleware</id>
    <content type="html"><![CDATA[<p>In order for a smart card to be usable by a third party application, a vendor-supplied
driver or a middleware needs to be available. On the Windows platform, a smart card
middleware must follow the <a href="http://msdn.microsoft.com/en-us/windows/hardware/gg487500.aspx">Windows Smart Card Minidriver specification</a> which is
designed to present a consistent interface to the card. This is not always the case,
and card vendors sometimes implement custom and non-standard interfaces.</p>

<!--more-->


<p>Since smart cards are designed to be tamper-resistant and secure, reverse
engineering of the smart card itself can be time consuming and expensive so it
is ofthen the best to take a look at the middleware.</p>

<h2>Identifying key middleware functions</h2>

<p>When faced with a smart card of a unknown specification,  the middleware functions
that directly communicate with the  card should be examined. The middleware is
responsible for abstracting the card to the programmer and examining these
abstractions gives further insight into the smart card&rsquo;s design. The smart card
middleware is distributed as a DLL (Dynamic Loadable Library) file which exports
a specific set of functions defined by the minidriver specification.</p>

<p>Before accessing the card in any way, the middleware must be initialized.
Initialization is done by calling <a href="http://msdn.microsoft.com/en-us/library/dd627600%28v=vs.85%29.aspx">CardAcquireContext</a> function.
<em>CardAcquireContext</em> must be exported by the middleware and is usually the only
exported function.</p>

<p><em>CardAcquireContext</em> is responsible, amongst other tasks, for setting the function
pointers in the <em>CARD_DATA</em> structure. In the assembled code, this will usually be
represented by the series of the pointer assignment operations to the appropriate
offsets into the <em><a href="http://msdn.microsoft.com/en-us/library/dd627628%28v=vs.85%29.aspx">CARD_DATA</a></em> structure. By loadin apropriate C header file
for <em>CARD_DATA</em> structure in IDA, it will be able to determine the locations of
specific functions:
<img src="http://ea.github.io/images/scard_data.png"></p>

<p>From this, we can clearly determine what each function does (at least on the)
high level.</p>

<h2>Capturing data trafic</h2>

<p>middleware sends the APDU commands with specific parameters to the smart card and
the smart card responds with the APDU response. Capturing this data exchange can
help greatly in understanding the smart card and middleware design.  The APDU structure
is defined by the <a href="http://www.ttfn.net/techno/smartcards/iso7816_4.html">ISO/IEC 7816-4 standard</a>. The command APDU contains a
mandatory 4 byte long header and up to 255 bytes of data.
The response APDU is sent by the card to the reader and contains 2 byte status
word and up to 255 bytes of data. . The command status <strong>00 90</strong> in hexadecimal
signifies that the command has been executed successfully.</p>

<p>On the Windows operating systems, all smart card communication is done trough
<strong>WinSCard API</strong> which defines the low level smart card access function. The <em><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa379804%28v=vs.85%29.aspx">ScardTransmit</a></em>
function sends the command APDUs to the card and returns the response. One solution
for monitoring the data transmission from and to the cards is to intercept
<em>SCardTransmit</em> function calls and inspecting the arguments and return values.</p>

<p>I wrote a simple DLL that hooks <em>SCardTransmit</em> and records sent and received data.
The code is available on <a href="https://github.com/ea/smartcard-sniffer">my github repository</a> and precompiled binaries are
available <a href="https://github.com/ea/smartcard-sniffer/releases/download/v0.1/SmartcardSniffer-0.1.zip">here</a>. During the communication between the Windows process and
the smart card, a log file is created. Log file is named after the process.
The transmitted data is prefixed with the <strong>>>></strong> symbol, while the received data
is prefixed with the <strong>&lt;&lt;&lt;</strong> symbol. Each data transmission is recorded in the
log file immediately and file access is freed to combine the log analysis with
the process instrumentation in the debugger.</p>

<p>Here&rsquo;s the example dump:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Winscard!SCardTransmit:
</span><span class='line'>&gt;&gt;&gt; 00:A4:08:00:02:0F:02
</span><span class='line'>&lt;&lt;&lt; 6F:38:62:36:83:02:0F ... 90:00
</span><span class='line'>Winscard!SCardTransmit:
</span><span class='line'>&gt;&gt;&gt; 00:B0:00:00:06
</span><span class='line'>&lt;&lt;&lt; 00:0D:02:00:63:00:90:00
</span><span class='line'>Winscard!SCardTransmit:
</span><span class='line'>&gt;&gt;&gt; 00:B0:00:00:60
</span><span class='line'>&lt;&lt;&lt; 00:0D:02:00:63:00:0A ... 90:00
</span><span class='line'>Winscard!SCardTransmit:
</span><span class='line'>&gt;&gt;&gt; 00:B0:00:60:09
</span><span class='line'>&lt;&lt;&lt; 00:53:43:11:06:02:00:53:43:90:00
</span><span class='line'>Winscard!SCardTransmit:
</span><span class='line'>&gt;&gt;&gt; 00:A4:04:00:0B:A0:00:00:03:97:43:49:44:5F:01:00
</span><span class='line'>&lt;&lt;&lt; 6A:82</span></code></pre></td></tr></table></div></figure>


<p>The first APDU command in the listing 4 has the instruction A4 which, by the
<a href="http://www.ttfn.net/techno/smartcards/iso7816_4.html">ISO/IEC 7816-4 standard</a>, specifies the <em>SELECT FILE</em> instruction responsible
for selecting a particular elementary file on the smart card with the name <strong>0F 02</strong>.
The last two bytes of the response APDU are <em>90 00</em> which indicates the success.
By enumerating all unique <em>SELECT FILE</em> instructions executed, a list of the elementary
files present on the card can be created. The next three commands have the <em>INS</em>
byte set to <strong>B0</strong> which corresponds to the <em>READ BINARY</em> instruction. The <em>READ BINARY</em>
instruction can read the maximum of 255 bytes of data at a time so multiple
requests with incrementing offsets would be needed to read a large file. The
file can then be reconstructed by the log. The Last command is the <em>SELECT FILE</em>
instruction which response indicates an error has occurred.</p>

<p>The extensive list of known command APDU instructions can be found in <a href="http://web.archive.org/web/20090630004017/http://cheef.ru/docs/HowTo/APDU.info">this page on web archive</a>.
Repackaging the sniffed data into something that Wireshark can eat would be
useful but I&rsquo;ll leave that for the next time.</p>

<p>Peace out</p>
]]></content>
  </entry>
  
</feed>
